#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
struct pa {
	int from, to;
	bool operator<(const struct pa b)const {
		if (from == b.from)return to < b.to;
		else return from < b.from;
	}
};
vector<struct pa> ans;
int n, m;
vector<int> v[100001];
int depth[100001];
int dfs(int i, int cnt, int parent) {
	depth[i] = cnt;
	int ret = cnt;
	for (auto& next : v[i]) {
		if (next == parent)continue;
		if (depth[next]) {
			ret = min(ret, depth[next]);
			continue;
		}

		int prev = dfs(next, cnt + 1, i);
		if (prev > depth[i]) {
			ans.push_back({ min(i,next),max(i,next) });
		}
		ret = min(ret, prev);
	}
	return ret;
}
int main(void) {
	ios::sync_with_stdio(false);	cin.tie(NULL);	cout.tie(NULL);
	cin >> n >> m;
	for (int i = 0, a, b; i < m; i++) {
		cin >> a >> b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	for (int i = 1; i <= n; i++) {
		if (!depth[i]) {
			dfs(i, 1,0);
		}
	}
	sort(ans.begin(), ans.end());
	cout << ans.size() << "\n";
	for (auto& p : ans) {
		cout << p.from << " " << p.to << "\n";
	}

	return 0;
}